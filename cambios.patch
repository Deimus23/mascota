diff --git a/src/main/java/itacademy/mascota/configuration/SecurityConfig.java b/src/main/java/itacademy/mascota/configuration/SecurityConfig.java
index cbfb27e..1e4ba1e 100644
--- a/src/main/java/itacademy/mascota/configuration/SecurityConfig.java
+++ b/src/main/java/itacademy/mascota/configuration/SecurityConfig.java
@@ -17,6 +17,11 @@ import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
 import org.springframework.security.crypto.password.PasswordEncoder;
 import org.springframework.security.web.SecurityFilterChain;
 import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
+import org.springframework.web.cors.CorsConfiguration;
+import org.springframework.web.cors.CorsConfigurationSource;
+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
+
+import java.util.List;
 
 @Configuration
 @EnableWebSecurity
@@ -48,7 +53,7 @@ public class SecurityConfig {
     @Bean
     public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
         http.csrf(AbstractHttpConfigurer::disable)
-                .cors(cors -> cors.disable())
+                .cors(cors -> cors.configurationSource(corsConfigurationSource()))
                 .authorizeHttpRequests(auth -> auth
                         .requestMatchers("/auth/login", "/auth/register").permitAll()
                         .anyRequest().authenticated()
@@ -64,4 +69,18 @@ public class SecurityConfig {
 
         return http.build();
     }
+
+    @Bean
+    public CorsConfigurationSource corsConfigurationSource() {
+        CorsConfiguration configuration = new CorsConfiguration();
+        configuration.setAllowedOrigins(List.of("http://localhost:5173", "http://localhost:3000"));
+        configuration.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS"));
+        configuration.setAllowedHeaders(List.of("*"));
+        configuration.setAllowCredentials(true); //
+
+        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
+        source.registerCorsConfiguration("/**", configuration);
+
+        return source;
+    }
 }
diff --git a/src/main/java/itacademy/mascota/controller/AuthController.java b/src/main/java/itacademy/mascota/controller/AuthController.java
index 9e22129..0b5a3a8 100644
--- a/src/main/java/itacademy/mascota/controller/AuthController.java
+++ b/src/main/java/itacademy/mascota/controller/AuthController.java
@@ -10,7 +10,6 @@ import org.springframework.web.bind.annotation.*;
 @RestController
 @RequestMapping("/auth")
 @RequiredArgsConstructor
-@CrossOrigin(value = "*", allowedHeaders = "*", origins = "*")
 public class AuthController {
     private final AuthService authService;
     @PostMapping("/register")
diff --git a/src/main/java/itacademy/mascota/controller/PetController.java b/src/main/java/itacademy/mascota/controller/PetController.java
index e345ce5..ea23303 100644
--- a/src/main/java/itacademy/mascota/controller/PetController.java
+++ b/src/main/java/itacademy/mascota/controller/PetController.java
@@ -1,5 +1,6 @@
 package itacademy.mascota.controller;
 
+import itacademy.mascota.dto.CreatePetDTO;
 import itacademy.mascota.dto.PetDTO;
 import itacademy.mascota.repository.PetRepository;
 import itacademy.mascota.service.PetService;
@@ -33,7 +34,7 @@ public class PetController {
     }
 
     @PostMapping
-    public ResponseEntity<PetDTO> createPet(@RequestBody PetDTO pet) {
+    public ResponseEntity<PetDTO> createPet(@RequestBody CreatePetDTO pet) {
         return ResponseEntity.ok(this.petService.createPet(pet));
     }
 
diff --git a/src/main/java/itacademy/mascota/dto/CreatePetDTO.java b/src/main/java/itacademy/mascota/dto/CreatePetDTO.java
new file mode 100644
index 0000000..46c8295
--- /dev/null
+++ b/src/main/java/itacademy/mascota/dto/CreatePetDTO.java
@@ -0,0 +1,21 @@
+package itacademy.mascota.dto;
+
+import itacademy.mascota.enums.Complement;
+import itacademy.mascota.enums.Environment;
+import itacademy.mascota.enums.PetColor;
+import itacademy.mascota.enums.PetType;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class CreatePetDTO {
+
+    private String name;
+    private PetColor petColor;
+    private PetType petType;
+    private Environment environment;
+    private Complement complement;
+}
diff --git a/src/main/java/itacademy/mascota/service/PetService.java b/src/main/java/itacademy/mascota/service/PetService.java
index 47ce578..14caba9 100644
--- a/src/main/java/itacademy/mascota/service/PetService.java
+++ b/src/main/java/itacademy/mascota/service/PetService.java
@@ -1,5 +1,6 @@
 package itacademy.mascota.service;
 
+import itacademy.mascota.dto.CreatePetDTO;
 import itacademy.mascota.dto.PetDTO;
 import itacademy.mascota.model.Pet;
 import itacademy.mascota.model.User;
@@ -41,9 +42,8 @@ import java.util.stream.Collectors;
                     .toList();
         }
 
-        public PetDTO createPet(PetDTO petDTO) {
-            Pet pet = convertToEntity(petDTO);
-            initializeDefaults(pet);
+        public PetDTO createPet(CreatePetDTO petDTO) {
+            Pet pet = this.initializeNewPet(petDTO);
             Pet saved = petRepository.save(pet);
             return convertToDTO(saved);
         }
@@ -66,12 +66,6 @@ import java.util.stream.Collectors;
             }).orElse(false);
         }
 
-        private void initializeDefaults(Pet pet) {
-            if (pet.getLife() == 0) pet.setLife(100);
-            if (pet.getHappiness() == 0) pet.setHappiness(100);
-            if (pet.getEnergy() == 0) pet.setEnergy(100);
-        }
-
         public PetDTO convertToDTO(Pet pet) {
             if (pet == null) return null;
 
@@ -88,21 +82,19 @@ import java.util.stream.Collectors;
             );
         }
 
-        public Pet convertToEntity(PetDTO dto) {
-            if (dto == null) return null;
-
-            Pet pet = new Pet();
-            pet.setId(dto.getId());
-            pet.setName(dto.getName());
-            pet.setPetColor(dto.getPetColor());
-            pet.setPetType(dto.getPetType());
-            pet.setEnvironment(dto.getEnvironment());
-            pet.setComplement(dto.getComplement());
-            pet.setLife(dto.getLife());
-            pet.setHappiness(dto.getHappiness());
-            pet.setEnergy(dto.getEnergy());
-
-            return pet;
+        private Pet initializeNewPet(CreatePetDTO petDTO) {
+            Pet newPet = new Pet();
+            //init values from dto
+            newPet.setName(petDTO.getName());
+            newPet.setPetType(petDTO.getPetType());
+            newPet.setPetColor(petDTO.getPetColor());
+            newPet.setComplement(petDTO.getComplement());
+
+            //init default values
+            newPet.setHappiness(100);
+            newPet.setEnergy(100);
+            newPet.setLife(100);
+            return newPet;
         }
 
     }
